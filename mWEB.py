import streamlit as st
import numpy as np
import pandas as pd
import math
import matplotlib.pyplot as plt
from scipy.optimize import minimize_scalar
from processamento import balanceProcessing
from processamento import jumpProcessing
from processamento import tugProcessing
from processamento import ytestProcessing
from processamento import jointSenseProcessing
import matplotlib.gridspec as gridspec
from matplotlib.patches import Ellipse
from scipy.integrate import trapezoid, cumulative_trapezoid
from scipy.ndimage import uniform_filter1d
from textwrap import dedent

# --------- Config da p√°gina ---------
st.set_page_config(
    page_title="Momentum Web",
    page_icon="‚ö°",
    layout="wide"
)

# ============== I18N: Port√£o de idioma (N√ÉO ESCRITO) ==============
# Dicion√°rio b√°sico s√≥ para r√≥tulos principais; voc√™ pode expandir depois
T = {
    "pt": {
        "choose": "Selecione o idioma",
        "pages": {
            "home": "üè† P√°gina Inicial",
            "import": "‚¨ÜÔ∏è Importar Dados",
            "plot": "üìà Visualiza√ß√£o Gr√°fica",
            "export": "üì§ Exportar Resultados",
            "refs": "üìñ Refer√™ncias bibliogr√°ficas",
        }
    },
    "en": {
        "choose": "Choose your language",
        "pages": {
            "home": "üè† Home",
            "import": "‚¨ÜÔ∏è Import Data",
            "plot": "üìà Plots",
            "export": "üì§ Export Results",
            "refs": "üìñ References",
        }
    },
    "es": {
        "choose": "Elija su idioma",
        "pages": {
            "home": "üè† Inicio",
            "import": "‚¨ÜÔ∏è Importar Datos",
            "plot": "üìà Visualizaci√≥n Gr√°fica",
            "export": "üì§ Exportar Resultados",
            "refs": "üìñ Referencias bibliogr√°ficas",
        }
    },
}

def _set_lang(lang_code: str):
    st.session_state["lang"] = lang_code
    st.query_params["lang"] = lang_code
    st.rerun()

# L√™ idioma de URL ou sess√£o
if "lang" not in st.session_state:
    qp = st.query_params.get("lang", None)
    st.session_state["lang"] = qp if qp in T else None

# Mostra seletor (apenas bandeiras) antes do conte√∫do
if st.session_state["lang"] not in T:
    st.markdown("""
        <style>
        .lang-gate {
            position: fixed; inset: 0; display:flex; align-items:center; justify-content:center;
            background: linear-gradient(135deg, #ffffff 0%, #f2f2f2 40%, #e6e6e6 100%);
            z-index: 9999;
        }
        .lang-card {
            background: rgba(255,255,255,.8); padding: 24px; border-radius: 16px;
            box-shadow: 0 8px 30px rgba(0,0,0,.1); text-align:center; min-width: 280px;
        }
        .lang-title { font-size: 1.1rem; margin-bottom: .75rem; opacity: .85; }
        </style>
    """, unsafe_allow_html=True)

    st.markdown('<div class="lang-gate"><div class="lang-card">', unsafe_allow_html=True)
    st.markdown(f'<div class="lang-title">{T["pt"]["choose"]}</div>', unsafe_allow_html=True)

    c1, c2, c3 = st.columns(3)
    with c1:
        if st.button("üáßüá∑", type="primary", use_container_width=True, help="Portugu√™s"):
            _set_lang("pt")
    with c2:
        if st.button("üá∫üá∏", type="primary", use_container_width=True, help="English"):
            _set_lang("en")
    with c3:
        if st.button("üá™üá∏", type="primary", use_container_width=True, help="Espa√±ol"):
            _set_lang("es")

    st.markdown('</div></div>', unsafe_allow_html=True)
    st.stop()

# Idioma atual
LANG = st.session_state["lang"]
PAGES_LABELS = T[LANG]["pages"]
PAGE_IDS = ["home", "import", "plot", "export", "refs"]
PAGE_LABEL_LIST = [PAGES_LABELS[k] for k in PAGE_IDS]

# ===================== Estilo de fundo (seu CSS) ===================
st.markdown("""
<style>
/* Fundo estilo "alum√≠nio" */
.stApp {
  background: linear-gradient(135deg, #ffffff 0%, #f2f2f2 40%, #e6e6e6 100%);
}

/* Barra superior */
header[data-testid="stHeader"] {
  background: linear-gradient(135deg, #ffffff 0%, #f2f2f2 40%, #e6e6e6 100%) !important;
}

/* Deixa centro e sidebar transparentes para o gradiente aparecer */
.block-container { background: transparent; }
section[data-testid="stSidebar"] { background: transparent; }
</style>
""", unsafe_allow_html=True)

# ====================== T√≠tulo (mantido) ===========================
st.markdown(
    """
    <h1 style='text-align: center; color: #1E90FF;'>
        Momentum Web
    </h1>
    """,
    unsafe_allow_html=True
)

# =================== Fun√ß√£o de carga (mantida) =====================
@st.cache_data
def carregar_dados_generico(arquivo):
    try:
        df = pd.read_csv(arquivo, sep=None, engine='python')
        if df.shape[1] == 5:
            dados = df.iloc[:, 1:5]  # Usa colunas 2 a 5
        elif df.shape[1] == 4:
            dados = df.iloc[:, 0:4]  # Usa todas
        else:
            st.error("O arquivo deve conter 4 ou 5 colunas com cabe√ßalhos.")
            return None
        dados.columns = ["Tempo", "X", "Y", "Z"]
        return dados
    except Exception as e:
        st.error(f"Erro ao ler o arquivo: {e}")
        return None

# =================== Menu lateral com i18n =========================
selected_label = st.sidebar.radio("üìÇ Navegue pelas p√°ginas", PAGE_LABEL_LIST)
pagina = PAGE_IDS[PAGE_LABEL_LIST.index(selected_label)]  #

#== P√°gina Inicial ===
if pagina == "home":
    html = dedent("""
        <div style="text-align: justify; font-size: 1.1rem; line-height: 1.6; color: #333333;
            max-width: 900px; margin: auto; background-color: rgba(255,200,255,0.6);
            padding: 20px; border-radius: 8px;">
            <p><b>Bem-vindo ao Momentum Web</b>, a aplica√ß√£o Web para an√°lise de dados de protocolos de avalia√ß√£o do
            <i>Momentum Sensors</i>.</p>
            <p>Os protocolos de an√°lise dos dados s√£o baseados em m√©todos usados em artigos cient√≠ficos do grupo 
            idealizador do Projeto Momentum compostos por pesquisadores da Universidade Federal do Par√°, Universidade do Estado do Par√° e Instituto Federal de S√£o Paulo. 
            O projeto representa uma iniciativa de <b>desenvolvimento cient√≠fico e tecnol√≥gico</b> com o objetivo de propor m√©todos confi√°veis de 
            avalia√ß√£o sens√≥rio-motora usando sensores presentes em smartphones.</p>
            <p>Alguns protocolos estar√£o em desenvolvimento e ser√£o indicados quando for o caso.</p>
            Utilize o <b>menu lateral</b> para navegar entre as diferentes etapas da an√°lise.</p>
        </div>
    """)
    st.markdown(html, unsafe_allow_html=True)

# === P√°gina de Importa√ß√£o ===
elif pagina == "import":
    st.title("‚¨ÜÔ∏è Importar Dados")

    col1, col2, col3 = st.columns([1, 0.2, 1])
    with col1:
        tipo_teste = st.selectbox(
            "Qual teste voc√™ deseja analisar?",
            ["Selecione...", "Equil√≠brio", "Salto", "TUG", "Propriocep√ß√£o", "Y test"]
        )

        if tipo_teste != "Selecione...":
            st.session_state["tipo_teste"] = tipo_teste

        if tipo_teste == "Equil√≠brio":
            st.subheader("üßçüèΩ‚Äç‚ôÄÔ∏è Importar dados de Equil√≠brio")
            arquivo = st.file_uploader(
                "Selecione o arquivo de equil√≠brio (CSV ou TXT)", type=["csv", "txt"])
            if arquivo is not None:
                dados = carregar_dados_generico(arquivo)
                if dados is not None:
                    st.success('Dados carregados com sucesso')
                    st.session_state["dados"] = dados

        elif tipo_teste == "Salto":
            st.subheader("ü§∏ Importar dados de Salto")
            arquivo = st.file_uploader(
                "Selecione o arquivo de salto (CSV ou TXT)", type=["csv", "txt"])
            if arquivo is not None:
                dados = carregar_dados_generico(arquivo)
                if dados is not None:
                    st.success('Dados carregados com sucesso')
                    st.session_state["dados"] = dados

        elif tipo_teste == "TUG":
            st.subheader("üì± Importar dados dos sensores")
            arquivo = st.file_uploader(
                "Selecione o arquivo do aceler√¥metro (CSV ou TXT)", type=["csv", "txt"])
            if arquivo is not None:
                dados_acc = carregar_dados_generico(arquivo)
                if dados_acc is not None:
                    st.success("Arquivo carregado com sucesso!")
                    st.dataframe(dados_acc.head())
                    st.session_state["dados_acc"] = dados_acc
                    st.session_state["dados"] = dados_acc
                    arquivo = st.file_uploader("Selecione o arquivo do girosc√≥pico (CSV ou TXT)", type=["csv", "txt"])
                    if arquivo is not None:
                        dados_gyro = carregar_dados_generico(arquivo)
                        if dados_gyro is not None:
                            st.success("Arquivo carregado com sucesso!")
                            st.dataframe(dados_gyro.head())
                            st.session_state["dados_gyro"] = dados_gyro
        
        elif tipo_teste == "Y test":
            st.subheader("üì± Importar dados dos sensores")
            arquivo = st.file_uploader(
                "Selecione o arquivo da coluna vertebral (CSV ou TXT)", type=["csv", "txt"])
            if arquivo is not None:
                dados_acc_coluna = carregar_dados_generico(arquivo)
                if dados_acc_coluna is not None:
                    st.success("Arquivo carregado com sucesso!")
                    st.dataframe(dados_acc_coluna.head())
                    st.session_state["dados_acc_coluna"] = dados_acc_coluna
                    st.session_state["dados"] = dados_acc_coluna
                    arquivo_2 = st.file_uploader("Selecione o arquivo do joelho (CSV ou TXT)", type=["csv", "txt"])
                    if arquivo_2 is not None:
                        dados_acc_joelho = carregar_dados_generico(arquivo_2)
                        if dados_acc_joelho is not None:
                            st.success("Arquivo carregado com sucesso!")
                            st.dataframe(dados_acc_joelho.head())
                            st.session_state["dados_acc_joelho"] = dados_acc_joelho

        elif tipo_teste == "Propriocep√ß√£o":
            st.subheader("üì¶ Importar dados de Propriocep√ß√£o")
            arquivo = st.file_uploader(
                "Selecione o arquivo de propriocep√ß√£o (CSV ou TXT)", type=["csv", "txt"])
            if arquivo is not None:
                dados = carregar_dados_generico(arquivo)
                if dados is not None:
                    st.success('Dados carregados com sucesso')
                    st.session_state["dados"] = dados
        elif tipo_teste == "Selecione...":
            st.info("Selecione um tipo de teste para continuar.")

    with col3:
        if tipo_teste == "Equil√≠brio":
            st.markdown(
            """
            <h1 style='text-align: center; color: #1E90FF;'>
            üßçüèΩ‚Äç‚ôÄÔ∏èEquil√≠brio est√°tico
            </h1>
            """,
            unsafe_allow_html=True
            )
            html = dedent("""
            <div style="text-align: justify; font-size: 1.1rem; line-height: 1.6; color: #333333;
            max-width: 900px; margin: auto; background-color: rgba(255,200,255,0.6);
            padding: 20px; border-radius: 8px;">
    
            <p>
            A avalia√ß√£o do equil√≠brio est√°tico usando o Momentum Sensors foi baseada nos artigos de 
            <a href="https://www.mdpi.com/2075-4426/12/7/1019" target="_blank" style="color:#1E90FF; text-decoration:none;">Rodrigues et al. (2022)</a>, 
            <a href="https://www.frontiersin.org/journals/neurology/articles/10.3389/fneur.2023.1277408/full" target="_blank" style="color:#1E90FF; text-decoration:none;">Correa et al. (2023)</a> 
            e 
            <a href="https://www.scielo.br/j/aabc/a/7z5HDVZKYVMxfWm8HxcJqZG/?lang=en&format=pdf" target="_blank" style="color:#1E90FF; text-decoration:none;">Fernandes et al. (2024)</a>.
            </p>

            <p>
            √â necess√°rio fixar o smartphone na coluna lombar do paciente e pedir para que ele n√£o se movimente ou fale durante o tempo de registro.
            </p>

            </div>
            """)
            st.markdown(html, unsafe_allow_html=True)
        elif tipo_teste == 'Salto':
            st.markdown(
            """
            <h1 style='text-align: center; color: #1E90FF;'>
            ü§∏Salto vertical
            </h1>
            """,
            unsafe_allow_html=True
            )
            html = dedent("""
            <div style="text-align: justify; font-size: 1.1rem; line-height: 1.6; color: #333333;
            max-width: 900px; margin: auto; background-color: rgba(255,200,255,0.6);
            padding: 20px; border-radius: 8px;">
    
            <p>
            A avalia√ß√£o do salto vertical usando o Momentum Sensors foi baseada nos artigos de 
            <a href="https://www.mdpi.com/1424-8220/23/13/6022" target="_blank" style="color:#1E90FF; text-decoration:none;">Moreno-P√©rez et al. (2023)</a>  
            e <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC5454547/" target="_blank" style="color:#1E90FF; text-decoration:none;">Mateos-Angulo et al. (2015)</a>. 
            </p>

            </div>
            """)
            st.markdown(html, unsafe_allow_html=True)
        elif tipo_teste == "TUG":
            st.markdown(
            """
            <h1 style='text-align: center; color: #1E90FF;'>
            Timed Up and Go instrumentado
            </h1>
            """,
            unsafe_allow_html=True
            )
            html = dedent("""
            <div style="text-align: justify; font-size: 1.1rem; line-height: 1.6; color: #333333;
            max-width: 900px; margin: auto; background-color: rgba(255,200,255,0.6);
            padding: 20px; border-radius: 8px;">
    
            <p>
            A avalia√ß√£o do Timed Up ang Go instrumentado usando o Momentum Sensors foi baseada nos artigos de 
            <a href="https://www.mdpi.com/1424-8220/24/9/2918" target="_blank" style="color:#1E90FF; text-decoration:none;">Santos et al. (2024)</a>, 
            <a href="https://www.frontiersin.org/journals/neurology/articles/10.3389/fneur.2023.1277408/full" target="_blank" style="color:#1E90FF; text-decoration:none;">Correa et al. (2023)</a> 
            e 
            <a href="https://www.scielo.br/j/aabc/a/7z5HDVZKYVMxfWm8HxcJqZG/?lang=en&format=pdf" target="_blank" style="color:#1E90FF; text-decoration:none;">Fernandes et al. (2024)</a>.
            </p>

            </div>
            """)
            st.markdown(html, unsafe_allow_html=True)
        elif tipo_teste == "Propriocep√ß√£o":
            st.markdown(
            """
            <h1 style='text-align: center; color: #1E90FF;'>
            Sensa√ß√£o de posicionamento articular
            </h1>
            """,
            unsafe_allow_html=True
            )
            html = dedent("""
            <div style="text-align: justify; font-size: 1.1rem; line-height: 1.6; color: #333333;
            max-width: 900px; margin: auto; background-color: rgba(255,200,255,0.6);
            padding: 20px; border-radius: 8px;">
    
            <p>
            A avalia√ß√£o da sensa√ß√£o de posi~cionamento articular usando o Momentum Sensors foi baseada no artigo de 
            <a href="https://www.frontiersin.org/journals/neuroscience/articles/10.3389/fnins.2025.1561241/full" style="color:#1E90FF; text-decoration:none;">Almeida et al. (2025)</a>. 
            √â preciso mensurar a amplitude articular inicial usando goni√¥metro para adicionar √† varia√ß√µes articulares desta posi√ß√£o inicial. 
            </p>

            </div>
            """)
            st.markdown(html, unsafe_allow_html=True)  
        elif tipo_teste == "Y test":
            st.markdown(
            """
            <h1 style='text-align: center; color: #1E90FF;'>
            Y test
            </h1>
            """,
            unsafe_allow_html=True
            )
            html = dedent("""
            <div style="text-align: justify; font-size: 1.1rem; line-height: 1.6; color: #333333;
            max-width: 900px; margin: auto; background-color: rgba(255,200,255,0.6);
            padding: 20px; border-radius: 8px;">
    
            <p>
            A avalia√ß√£o do equil√≠brio din√¢mico pelo Y test est√° em desenvolvimento sob coordena√ß√£o do Prof. Dr. Andr√© dos Santos Cabral da Universidade do Estado do Par√°. 
            </p>

            </div>
            """)
            st.markdown(html, unsafe_allow_html=True)     
        else:
            st.title('Men at working')

    









